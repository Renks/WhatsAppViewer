
const divProfilePic = document.querySelector("#profile-pic");
const spanProfileName = document.querySelector("#profile-name span");
const divAllMsgs = document.querySelector("#all-msgs-from-chat");
let chatListMsgsLoadedCounter = 0; // MUST START FROM 0 - USED FOR "from_limit" sql query 

const spinner = document.createElement('div');
spinner.setAttribute("id","spinner");
spinner.setAttribute("style","min-height: 50px;")
spinner.innerText = "Loading...";



const doesFileExistOLD = (urlToFile) => {
    if(urlToFile === null){
        console.error("doesFileExists: You supplied a null url");
        return false;
    }
    var xhr = new XMLHttpRequest();
    xhr.open('HEAD', urlToFile, false);
    xhr.send();

    return xhr.status !== 404;
}

const loadChat = (chat_div)=>{
    divAllMsgs.innerHTML = ""; // reset divAllMsgs first
    chatListMsgsLoadedCounter = 0; // reset loaded messages counter
    let chatID = ""; // reset chatID before we use it


    divProfilePic.innerHTML = chat_div.querySelector(".chat-img-profile").innerHTML;
    spanProfileName.innerHTML = chat_div.querySelector(".chat-sender").innerHTML;
    // divAllMsgs.innerHTML = `
    //     <div style="flex: 1 1 auto; min-height: 12px;"></div>`;
    divAllMsgs.appendChild(spinner);
    chatID = chat_div.getAttribute("chatListId");

    const spinnerOptions = {}
    const spinnerObserver = new IntersectionObserver(entries=>{
        entries.forEach(s=>{
            if(s.isIntersecting){
                spinner.innerText = "Loading. . .";
                // console.log("Loading more messages, counterLast: "+counterLast);
                getChatMsgs(chatID,chatListMsgsLoadedCounter,10).then(msgs => {
                    handleMsgs(msgs); // fetched msgs
                  });
                  // remove spinner from div and then relocate it to the top of the div
                  divAllMsgs.removeChild(spinner);
                  chatListMsgsLoadedCounter +=10;
            }else{
                spinner.innerText = "Not loading";
                divAllMsgs.append(spinner);
            }
        })
    },spinnerOptions);
    spinnerObserver.observe(spinner);
    
    // Intersection observer should observe spinner here
}

function handleMsgs(data){
    for(msg of data){
        msgDiv = document.createElement('div');
        msgDiv.setAttribute("msgId",msg['_id']);
        msgDiv.setAttribute("msgChatRowId",msg['chat_row_id'])
        msgDiv.setAttribute("class","msg");
        msgDiv.setAttribute("msgKeyId",msg['key_id']);
        msgDiv.setAttribute("msgJidRawString",msg['jid_raw_string']);

        msgContainerDiv = document.createElement('div');
        msgContainerDiv.setAttribute("id","msg-container");
        msgIfty = document.createElement('div'); // named Ifty coz of whatsweb class had the similar obfuscated name
        msgIfty.classList.add("ifty");
        msg22 = document.createElement('div'); // naming scheme: same reason as msgIfty
        msg22.classList.add("msg22"); // original classname: _22Msk
        // msg22 has two inner divs
        // first is msg text and second is time sent & read status
        msgContent = document.createElement('div');
        msgTime = document.createElement('div');

        msgContent.classList.add("copyable-text");
        msgTime.classList.add("stupid-time");

        msgContent.setAttribute("timeSent",msg['timestamp']);
        
        // Actual text of the message
        msgContentText = document.createTextNode(msg['text_data']);
        
        
        msgContent.appendChild(msgContentText);

        msg22.appendChild(msgContent);
        msgIfty.appendChild(msg22);
        msgContainerDiv.appendChild(msgIfty);
        // Finally appending the msgContainer
        msgDiv.appendChild(msgContainerDiv);

        if(msg['from_me'] == 1){
            msgDiv.classList.add("message-out");
        }else{
            msgDiv.classList.add("message-in");
        }
        // divAllMsgs.insertAdjacentHTML("afterbegin", msgDiv);
        // divAllMsgs.insertBefore(msgDiv, divAllMsgs.firstChild);
        divAllMsgs.appendChild(msgDiv);
    }
}

async function getChatMsgs(chat_id,from_limit=0,limit=50) {
    url = `/chat/${chat_id}?limit_from=${from_limit}&limit=${limit}`;
    console.log("URL: "+url);
    const response = await fetch(url);
    if (!response.ok) {
        const message = `An error has occured: ${response.status}`;
        throw new Error(message);
      }
    const msgJson = await response.json();
    if(msgJson.length<=0){
        return "NO_MORE_MSGS";
    }

    return msgJson;
}